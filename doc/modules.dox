/// \defgroup core Core
/// All computer algebra functionality in the form of C++ classes.
///
/// \defgroup display Cleanup
/// \ingroup core
/// Functionality to clean up expressions so that they satisfy the requirements
/// of a consistent expression tree.
///
/// \defgroup display Expression display
/// \ingroup core
/// Classes to handle printing of expressions in various formats. There
/// are several different requirements for printing, depending on whether
/// output is to the console, the graphical notebook, or to a different
/// computer algebra system. 
///
///
/// \defgroup compare Expression comparison
/// \ingroup core
/// Functions to compare and match expressions stored in exptree objects. 
/// These can involve wildcards and dummy indices, and matching may depend on 
/// the properties attached to symbols.
/// This is an important bit of functionality used widely throughout the Cadabra core.
/// All substitution and component evaluation logic depends on this module.
///
/// \defgroup pythoncore Python Core
/// \ingroup core
/// Python wrapper around the C++ core module, making the entire 
/// functionality of Cadabra accessible from Python.
///
/// \defgroup scalar Scalar algebra
/// \ingroup core
/// Functionality to make Cadabra interface with the SymPy computer
/// algebra system.
///
/// \defgroup algorithms Algorithms
/// \ingroup core
/// Containing all algorithms acting on symbolic expression trees.
///
/// \defgroup properties Properties
/// \ingroup core
/// Containing all properties that can be attached to symbolic expressions.
///
/// \defgroup clientserver Client-Server 
///
/// Base classes (independent of any GUI toolkit) to write Cadabra
/// clients and servers.
///
/// All clients use two threads. One is the main thread and runs
/// most of the logic in the DocumentThread object. The other one is
/// a thread which communicates with the server process; code for
/// this thread is in the ComputeThread object.  One typically
/// subclasses the former into a full-fledged object driving the
/// graphical user interface.
/// 
/// All functionality that deals with GUI updates is isolated in
/// GUIBase. A client should derive from this abstract base class
/// and implement the methods there. Clients should also derive from
/// DocumentThread, but there are no abstract virtual members
/// to implemented from this base class.
/// 
/// All actual updates to the document stored in the
/// DocumentThread::dtree member are made on the GUI thread as
/// well. The compute thread merely puts requests to change the
/// document onto a stack, and then requests that the GUI updates
/// the document.
///
/// In order to enable undo/redo, all updates to DocumentThread::dtree 
/// are made by putting objects derived from ActionBase onto the 
/// action stack. See DocumentThread::queue_action for details.
/// These ActionBase objects (among which ActionAddCell, ActionRemoveCell, 
/// ActionInsertText, etc) get executed on the GUI thread, and contain
/// the actual logic to perform updates to the document and related
/// GUI elements. 
