
# Testing a substitution rule in which an abstract index in the 
# expression is matched against a coordinate in the pattern.
# {m,n,p}::Indices(values={t,r}).
# {r,t}::Coordinate.
# ex:= A_{m n} + B_{m n};
# rl:= A_{t r} + B_{t r} = 3;
# substitute(ex, rl)

def test02():
{r,t}::Coordinate.
{m,n,p,s}::Indices(values={t,r}).
\partial{#}::PartialDerivative.
C::Depends(r,t).
ex:= A_{n m} B_{m n p} ( C_{p s} + D_{s p} );
rl:= [ A_{r t} = 3, B_{t r t} = 2, B_{t r r} = 5, C_{t r} = 1, D_{r t} = r**2*t, D_{t r}=t**2 ];
evaluate(ex, rl);
tst:= \components_{s}(\comma{r}= 6 r**2 t + 6, \comma{t}=15 t**2) - @(ex);
collect_components(_);
assert(tst==0);
print("Test 02 passed");

test02();


# Now a Christoffel example, i.e. with derivatives.

{r,t,\phi,\theta}::Coordinate.
{\mu,\nu,\rho,\sigma}::Indices(values={t,r,\phi,\theta}, position=fixed).
\partial{#}::PartialDerivative.
g_{\mu\nu}::Metric.
g^{\mu\nu}::InverseMetric.         
ex:= \Gamma^{\mu}_{\nu\rho};
rl:= \Gamma^{\mu}_{\nu\rho} = 1/2 g^{\mu\sigma} ( \partial_{\rho}{g_{\nu\sigma}}
                                                 +\partial_{\nu}{g_{\rho\sigma}}
                                                 -\partial_{\sigma}{g_{\nu\rho}} );

ss:= { g_{t t} = -(1-2 M/r),   g_{r r} = 1/(1-2 M/r), g_{\theta\theta} = r**2,    g_{\phi\phi}=r**2 \sin(\theta)**2 };
complete(ss, $g^{\mu\nu}$)
#ss:= { g_{t t} = -f(r), g_{r r} = 1/f(r), g_{\theta\theta} = r**2, g_{\phi\phi}=r**2 \sin(\theta)**2,
#       g^{t t} = 1/f(r), g^{r r} = f(r), g^{\theta\theta}  = r**(-2), g^{\phi\phi}=r**(-2) \sin(\theta)**(-2) };
substitute(ex, rl);
evaluate(ex, ss);
# Schutz (11.117) has an error in \Gamma^{\theta}_{\phi\phi}.

----------------------------------------

invert($g_{\mu\nu}$, ss);

{r,t,\theta,\phi}::Coordinate.
{m,n,p,q}::Indices(position=fixed,values={t,r,\theta,\phi}).
g_{m n}::Metric.
g^{m n}::InverseMetric.
# Need to be able to match g_{t t} to g_{m n} in property searching.
ss:= { g_{t t} = -(1-2 M/r),   g_{r r} = 1/(1-2 M/r), g_{\theta\theta} = r**2,    g_{\phi\phi}=r**2 \sin(\theta)**2};
complete(ss, $g^{m n}$);

-------------------------------------------

{r,t,\theta,\phi}::Coordinate.
{m,n,p,q}::Indices(position=fixed,values={t,r,\theta,\phi}).
rl:= { X^{t} -> X^{t}, g_{t t}=1, g_{r r}=3 };
ex:= g_{m n} X^{n};
evaluate(ex, rl);
print(tree(ex))

----------------------

{r,t}::Coordinate.
{m,n,p}::Indices(values={r,t}).
ex:= A_{m n}*A_{m n};
ss:= { A_{r r} -> a+b, A_{r t} -> b, A_{t t} -> c, A_{r r t}->3, A_{t t t}->c };
evaluate(ex, ss);
print(tree(ex))


------------------------

# The following test components of tensor outer products. The first one
# leads to a scalar multiplying the components tensor.

{r,t}::Coordinate.
{m,n}::Indices(values={t,r}).
ex:= g_{m n} X^{n} A;
rl:= { X^{t} -> X^{t}, g_{t t}=1, g_{r r}=3 };
evaluate(ex,rl);

# The second one is manifestly an outer product.

{r,t}::Coordinate.
{m,n,p}::Indices(values={t,r}).
ex:= X^{n} X^{m} X^{p};
rl:= { X^{t} -> T, X^{r} -> R };
evaluate(ex,rl);

-------------------------------------------


{r,t}::Coordinate.
{m,n}::Indices(values={r,t}).
ex:= A_{m n}+A_{n m};
ss:= { A_{m n} -> C_{m n} };
rl:= { C_{r r}=3 };
# Note: 
evaluate(ex, ss, rl);


{r,t}::Coordinate.
{m,n}::Indices("full",values={r,t}).
{i,j}::Indices("3d", parent="full").
ex:= A_{m n}+A_{n m};
rl:= { A_{t t} -> 3, A_{i j} -> \delta_{i j} };
evaluate(ex, rl);


{\mu,\nu,\rho,\sigma}::Indices(position=fixed).
\partial{#}::PartialDerivative.
ex:= R^{\mu}_{\nu\rho\sigma};
rl:= { R^{\mu}_{\nu\rho\sigma} -> \partial_{\rho}{\Gamma^{\mu}_{\nu\sigma}},
        \Gamma^{\mu}_{\nu\rho} = 1/2 g^{\mu\sigma} ( \partial_{\rho}{g_{\nu\sigma}}
                                                 +\partial_{\nu}{g_{\rho\sigma}}
                                                 -\partial_{\sigma}{g_{\nu\rho}} )
                                                  };
substitute(ex, rl, repeat=True);                                                  
       


# The above does not yet figure out that the expression is symmetric in nu and rho.
                                           

substitute(ex, rl);
# should give 3*2*1+3*5*(C_{r}+D_{r}).


- Store components as

    \components_{m}^{n p}(r,t){{r,t,t}={r**2},{...}}

    A_{m n}(r,t)[ {r,r}=r**2, {r,t}=r*t ]

  At a sum node, we then have terms which are either \components nodes (from lower levels)
  or tensors which still have to be replaced. E.g.

    A_{m n} + C_{m p} D_{p n}

    A_{m n} + \components_{m n}< {r,r}=r**2 + sin(r), {r,t}=r*cos(r) >
    

- First make depends logic, returning a list of Ex objects on which another Ex depends.
  Needed to determine which components of \partial_{\mu}{...} to keep.

- Also need substitute patterns ot automatically generate patterns for objects related by
  symmetry.

#---

{m,n,p}::Indices.
{r,t}::Coordinate.
ex:= A_{m n} A_{m n};
crds:= m -> { t, r, \phi, \theta };
vals:= { A_{t t} -> r, A_{r r} -> r**2, A_{t \phi} -> t };
evaluate(ex, crds, vals);
tst:= r*r + r**2 * r**2 + t*t - @(ex);
assert(tst)

{m,n,p,q}::Indices.
{t,r}::Coordinate.
ex:= A_{p m n} ( A_{m n} + B_{m n} );
crds:= m -> { t, r };
vals:= { A_{t t t} -> r, A_{t r r} -> r**2, A_{t t} -> r, A_{r r} -> r**2, B_{t t} -> 1 };
evaluate(ex, crds, vals);

tst:= r * ( r + 1 ) + r**2 * r**2 - @(ex);
assert(tst)
