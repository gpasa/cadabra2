def test06():
    __cdbkernel__=create_scope();
    {X,G,Y,A,B}::SortOrder.
    {X,A}::AntiCommuting.
    obj6:= A B G X A X;
    sort_product(obj6)
    tst6:= X X G A A B + @(obj6);
    collect_terms(_)
    assert(tst6==0)
    print('test06 passed')

test06()

def test07():
    __cdbkernel__=create_scope();
    {X,G,Y,A,B}::SortOrder.
    {X,A}::NonCommuting.
    obj7:= A*B*G*X*A*X;
    sort_product(_)
    tst7:= G A X A X B - @(obj7);
    collect_terms(_)
    assert(tst7==0)
    print('test07 passed')

test07()

def test08():
    __cdbkernel__=create_scope();
    { W_{m n}, W_{m} }::SortOrder.
    { W_{m n}, W_{m} }::AntiCommuting.
    obj8:= W_{m n} W_{p} W_{q r} W_{s} W_{t};
    sort_product(_)
    tst8:= - W_{m n} W_{q r} W_{p} W_{s} W_{t} - @(obj8);
    collect_terms(_)
    assert(tst8==0)
    print('test08 passed')

test08()

def test09():
    __cdbkernel__=create_scope();
    { \theta_a, \theta_b }::SelfAntiCommuting.
    obj9:= \theta_c \theta_b \theta_a;
    sort_product(_)
    tst9:= \theta_a \theta_b \theta_c + @(obj9);
    collect_terms(_)
    assert(tst9==0)
    print('test09 passed')

test09()

def test10():
    __cdbkernel__=create_scope();
    {a,b,c,d}::Indices.
    { \theta_a, \chi_a }::SortOrder.
    { \theta_a, \chi_a }::Commuting.
    {\theta_{a}, \theta_{b}}::SelfAntiCommuting.
    {\chi_{a},\chi_{b}}::SelfAntiCommuting.
    obj10:= \theta_c \theta_b \theta_d \chi_d \theta_a \chi_a;
    sort_product(_);
    tst10:= \theta_a \theta_b \theta_c \theta_d \chi_a \chi_d + @(obj10);
    collect_terms(_);
    assert(tst10==0)
    print('test10 passed')

test10()

def test12():
    __cdbkernel__=create_scope();
    \bar{#}::Accent.
    {D,K,B,A}::SortOrder.
    obj12:= A \bar{B} \bar{K} D;
    sort_product(_)
    tst12:= D \bar{K} \bar{B} A - @(obj12);
    collect_terms(_)
    assert(tst12==0)
    print('test12 passed')

test12()

def test16():
    __cdbkernel__=create_scope();
    {A_\mu, B_\mu}::AntiCommuting.
    \diff{#}::Derivative.
    obj16:= \diff{B_\mu}_{\nu} * \diff{A_\rho}_{\sigma};
    sort_product(_)
    tst16:= \diff{A_\rho}_{\sigma} * \diff{B_\mu}_{\nu} + @(obj16);
    collect_terms(_)
    assert(tst16==0)
    print('test16 passed')

test16()

def test17():
    __cdbkernel__=create_scope()
    \Gamma{#}::GammaMatrix.
    obj17a:= (\Gamma_{m n} + A_{m} \Gamma_{n})\Gamma_{p q r};
    sort_product(_)
    tst17a:= (\Gamma_{m n} + A_{m} \Gamma_{n})\Gamma_{p q r} - @(obj17a);
    assert(tst17a==0)
    obj17b:= \Gamma_{p q r} (\Gamma_{m n} + A_{m} \Gamma_{n});
    sort_product(_)
    tst17b:= \Gamma_{p q r} (\Gamma_{m n} + A_{m} \Gamma_{n}) - @(obj17b);
    assert(tst17b==0)
    print('test17 passed')

test17()

def test18():
    __cdbkernel__=create_scope();
    {\psi, \chi}::Spinor.
    {\psi, \chi, \Gamma_{#}}::NonCommuting.
    \Gamma_{#}::GammaMatrix.
    {\chi,\psi}::SortOrder.
    \bar{#}::Accent.
    obj18:= \bar{\psi} \Gamma_{m n p} \chi;
    sort_product(_)
    tst18:= \bar{\psi} \Gamma_{m n p} \chi - @(obj18);
    collect_terms(_)
    assert(tst18==0)
    print('test18 passed')

test18()

def test22():
    __cdbkernel__=create_scope();
    {\chi, \psi}::Weight(label=grassmann, value=1).
    tst22a:= \chi \psi \chi;
    #drop_weight(_, grassmann=3)

test22()

def test23():
    __cdbkernel__=create_scope()
    \nabla{#}::Derivative.
    ex:=\nabla_{i}{ C D E };
    substitute(_, $D->0$)
    assert(ex==0)

test23()

def test24():
    __cdbkernel__=create_scope()
    {s,r,l,k,m,n}::Indices(vector).
    {s,r,l,k,m,n}::Integer(0..d-1).
    \Gamma{#}::GammaMatrix(metric=\delta).
    \delta_{m n}::KroneckerDelta.
    obj:= \Gamma_{l r} \Gamma_{k s} q \Gamma_{r s} + \Gamma_{l r} d \Gamma_{k s} \Gamma_{r s};
    sort_product(_);
    tst:= \Gamma_{l r} \Gamma_{k s} \Gamma_{r s} q + \Gamma_{l r} \Gamma_{k s} \Gamma_{r s} d - @(obj);
    assert(tst==0)
    print('test24 passed')

test24()

def test25():
    __cdbkernel__=create_scope()
    ex:=(a*d+b)*c;
    distribute(_);
    tst:= a d c + b c - @(ex);
    assert(tst==0)
    print('test25 passed')

test25()

def test26():
    __cdbkernel__=create_scope()
    # FIXME: This won't work yet because we do not want to match
    # indices to numbers
    # rl:= a_{n} a_{m} = a_{m} a_{n} + m \delta_{m}_{-n};
    {m,n}::Integer.
    ex:= a_{1} a_{0} a_{-1};
    rl:= a_{n?} a_{m?} = a_{m?} a_{n?} + m? \delta_{m?}_{-n?};
    substitute(ex, rl);
    # FIXME: should not be necessary if the m?=0 would have removed the 2nd term.
    distribute(ex);
    tst:= a_{0} a_{1} a_{-1} - @(ex);
    assert(tst==0)

test26()

