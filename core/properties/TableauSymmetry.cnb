{
	"cells" : 
	[
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\property{TableauSymmetry}{Gives a tensor a generic Young tableau symmetry.}\n\nGives a tensor a generic Young tableau symmetry, as indicated by the arguments.\nTakes lists of two key-value pairs as arguments, indicating the \nshape of the Young tableau and the index slots associated to each box\nin the tableau. For instance\n"
				}
			],
			"hidden" : true,
			"source" : "\\property{TableauSymmetry}{Gives a tensor a generic Young tableau symmetry.}\n\nGives a tensor a generic Young tableau symmetry, as indicated by the arguments.\nTakes lists of two key-value pairs as arguments, indicating the \nshape of the Young tableau and the index slots associated to each box\nin the tableau. For instance\n"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\text{Attached property TableauSymmetry to~}R_{a b c d}.\\end{dmath*}"
				}
			],
			"source" : "R_{a b c d}::TableauSymmetry( shape={2,2}, indices={0,2,1,3} );"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "yields the symmetries of the Riemann tensor, that is, the symmetries of a Young tableau\nwith two rows of two boxes each. Note that indices are\ncounted from zero. You can see that this works by showing that the cyclic identity \nholds, using \\algo{young_project_tensor},\n"
				}
			],
			"hidden" : true,
			"source" : "yields the symmetries of the Riemann tensor, that is, the symmetries of a Young tableau\nwith two rows of two boxes each. Note that indices are\ncounted from zero. You can see that this works by showing that the cyclic identity \nholds, using \\algo{young_project_tensor},\n"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}R_{a b c d}+R_{a c d b}+R_{a d b c}\\end{dmath*}"
				}
			],
			"source" : "ex:= R_{a b c d} + R_{a c d b} + R_{a d b c};"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}0\\end{dmath*}"
				}
			],
			"source" : "young_project_tensor(_);"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "Simple symmetry is imposed by using a tableau with one row, while simple anti-symmetry \ncorresponds to a tableau with one column. See \\prop{Symmetric} and \\prop{AntiSymmetric} for\nexamples."
				}
			],
			"hidden" : true,
			"source" : "Simple symmetry is imposed by using a tableau with one row, while simple anti-symmetry \ncorresponds to a tableau with one column. See \\prop{Symmetric} and \\prop{AntiSymmetric} for\nexamples."
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : ""
		}
	],
	"description" : "Cadabra JSON notebook format",
	"version" : 1
}
